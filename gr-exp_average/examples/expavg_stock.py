#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Copyright 2014 Mitul Vekariya <vekariya93@gmail.com>.
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

from gnuradio import gr, gr_unittest
from gnuradio import blocks
import exp_average
import matplotlib.pyplot as plt
import numpy as np

class example_expavg (gr.top_block):
    def __init__(self):
	gr.top_block.__init__(self)
    
        src_data = (532.26,525.9,527.7,528.79,537.44,534.51,535.45,528.36,531.09,532.79,530.92,531,523.42,529.08,517.14,523.61,529.38,523.15,532.79,532.99,544.75,546,542.47,534.66,536.95,530.61,518.66,521.38,510.06,506.56,505.85,502.61,495.18,502.54,503.95,508.76,550.07,554,549.94,550.91,540.99,551.48,554.9,553.52,538.22,529.91,539.83,546.8,538.81,544.32,537.45,552.86,555.68,554.17,557.46,563.82,568.1,569.89,568,545.43,549.5,549.7,555.81,555.02,562.85,562.14,567,563.58,560.9,565.79,572.65,565.5,558.3,558,549.48,536.31,524.12,521.02,519.52,517.6,519.23,519.03,524.99,526.58,522.81,518,517.67,519.99,514.58,519.58,524.15,524.58,521.1,524.02,525,519.61,536.27,529.04,531.32,525,519,526.41,511.77,505.99,499.98,500.79,497.51,489.83,486.99,491.32,484.64,489.94,486.56,483.86,490.51,485.63,478.45,477.25,483.78,486,489.2,494.88,496.1,478,470.7,463.18,447.96,461,469.34,468.5,467.01,506.2,505,498.44,500.25,499.56,493.1,492,491.65,486,498,500.75,503.27,504.98,503.59,509.71,504.34,500.15,496.42,497.88,470.94,456.86,458.64,463.86,463.8,468.02,464.69,458.01,455.75,454.99,449.96,440.8,435.3,440.7,438.93,426,429.46,433.1,433.38,429.7,426.52,425.01,427.65,422.95,419.6,413.6,420.11,420.39,420.86,409.96,402.69,391.36,399.25,403.9,405.7,407.4,418.49,419.3,431.4,431.56,431.44,435.4,432.5,439.5,435.74,444.73,436.5,445.47,445.65,453.22,450.73,452.5,445.65,440,449.9,440.85,435.95,444.05,438.15,431.91,439.05,423.24,439.16,453.85,451.51,457.97,459.81,459.04,464.97,455.71,451.31,441.78,444.46,435.1,420.45,409.81,411.23,393.54,403.99,392.64,387.97,404.99,420.27,421.57,427,434.15,433.72,428.1,426.36,424.85,424.5,433.76,431.37,427.6,441.9,449.82,456.46,465.44,464.69,454.58,450.22,457.42,459.5,441.45,437.93,432.83,428.45,435.6,429.75,429.8,424.5,434.51,421.48,427.8,438,444.05,448.43,443.82,453.85,449.25,446,457.69,461.1,468.85,464.52,467.21,479.51,476.5,474,463.25,456.47,444.05,453.91,459.11,456.98,457,458.5,437.83,451.69,460,508.81,504.56,498.52,510.31,494.64,498.3,502.68,521,528.55,522.5,529.21,522,536.97,547.88,553.82,510.53,510.29,513.54,519,520.35,512.47,530,531.47,525,508.93,514.75,531.15,547.77,539.77,525,553.4,528.94,568.91,581.8,593.65,586.79,590.22,577.27,589.55,575.9,567.17,564.25,571.91,540.71,525.2,537.53,545.5,538.91,554.15,540.42,560.63,573.84,590.23,583.52,595.89,598.22,594.88,609.43,620,621.44,631,612.42,631.05,639.59,648.87,635.37,632.35,629.56,646.5,639.74,638.65,646.88,665.2,671.25,664.86,661.81,671.16,678.75,664.29,668.74,688.26,686.86,702.41,699.16,700.26,699.88,699.35,689.96,677.37,666.85,665.11,680.45,678.05,673.17,675.57,665.76,667.25,670.64,675.25,674.98,679.99,659.51,666.11,654.42,670.82,650.01,640,631.21,631.3,631.87,623.39,618.71,617.85,619.39,622.77,617.29,613.63,602.84,615.91,603.23,590.92,575.01,579.76,574.46,607.38,594.4,613.03,611.28,606.59,610.79,605.12,602.95,600.24,606.12,617.97,605.3,607.09,600.56,594.88,584.73,578,571.67,575,571.33,577.3,579.04,585.44,588.21,583.4,570.96,571,571.24,574.52,574.46,587.72,571.6,577.29,567.77,561.27,561.5,569.16,580.74,569.2,570.9,564.59,575.87,557.5,569.55,534.5,533.96,545.31,554.05,561.45,562.57,565,574.58,563.7,569.58,561.5,577.08,590.5,580.24,584.9,597.8,605.07,614.27,615.64,562.61,570.61,591.38,600.22,613.72,578.94,610.06,624.11,625,636.2,639.93,626.13,626.98,624.35,627.3,601.83,608.77,612.78,618.38,606.18,599.79,600.49,597.78,602.74,599.51,598.37,584.72,599.61,578.05,557.54,548.98,544.21,534.69,536.8,523.66,545.42,544.24,548.17,541.56,527.96,521.31,519.67,515.08,513.08,506.88,503.11,491.5,514.26,504.66,499.53,490.96,480.76,470.5,465.25,458.38,457.3,455.9,458.41,455.59,445.71,444.34,448.36,454.44,425.1,422.67,427.49,430.15,426.96,424.2,419.7,422.28,422.68,425.91,425.5,419.77,414.95,410,409.4,403.51,403.4,406.89,403.1,399.69,397,396.69,387.76,382.47,380.36,383.33,386.7,393,391.68,392.85,391.45,389.93,392.51,393.49,389.83,382.54,381.29,375.84,372.35,368.42,374.51,371.02,370.4,378.92,383.98,389.25,380.8,383.52,386.61,397.03,396.97,402.21,399.91,402.03,399.07,400.09,397.41,402.42,403,407.56,401.76,405.03,396.18,398.1,400,401.35,421.76,421.74,416.83,404.98,407.34,392.57,379.09,375.78,373.33,367.86,374.57,380.37,387.12,401.92,400.19,408.73,399.86,400.28,401.03,419.64,415.25,397,395.54,391.43,387.02,382.14,373,383.93,382.4,385.56,367.37,374.74,385.82,390.57,388.25,388.18,371.17,365.08,373.47,360.3,364.51,362.17,370.84,382.31,381.52,379.63,378.07,370.52,371.15,361.3,361.69,380.44,389.41,390.98,397.65,397.78,387.64,391.62,400.59,400,390.35,388.32,386.95,396.12,378,365.43,361.17,361.01,358.33,353.53,356.34,353.34,354.67,348.95,343,335.95,334.7,336.04,333.65,327.59,331.37,318.94,325.16,316.68,317.36,328.99,326.9,329.75,330,326.6,330.55,333.25,331.78,338.17,345.7,343.18,346.5,348.87,341.1,334.8,335.97,336.78,335.5,329.97,339.56,342.08,336.47,332,339.2,345.66,346.12,349.02,348.89,347.86,349.69,348.4,348.26,347.99,349.74,346.78,346.19,352.24,353.62,350.34,355,343.51,333.1,326.1,333.3,334.8,335.02,330.49,334.06,339.92,338.1,341.22,336.99,344.31,351.11,346.36,350.64,347.66,353.15,348.07,341.85,339.28,342.56,335.99,337.13,336.83,342,342.1,353.18,345.33,349.12,354.69,354.91,361.4,360.07,357.19,349.96,355.47,351.24,345.26,344.02,338.77,342.15,358.71,357.25,360.8,359.19,356.79,354.75,357.39,355.19,353.68,347.89,343.64,343.8,344.45,341.3,335.8,344.17,343.78,342.96,336.33,326.87,333.77,336.43,348.35,329.52,345.89,345.16,343.25,344.88,338.83,333.99,334.72,329.55,332.44,325.64,322.95,325.48,326.22,325.91,322.85,325,324.36,323,321.6,321.63,321.09,320,321.73,324.37,319.65,322.13,319.63,323.8,318.64,317.01,317.53,315.27,313.54,315.5,313.74,312,310.45,306.68,307.97,305.2,301.2,305.72,308.46,316,315,316.64,321.05,317.2,317.99,315.45,311.37,307,302.22,304.23,307.95,307.65,306.87,309.09,309.07,312.36,309,303.4,318.47,307.44,301.69,300.2,295.41,294.74,291.71,290.34,289.59,282,281.6,286.15,289,287.23,291.77,293.98,292.1,286.33,282.71,283.86,276.08,277.69,270.24,268.17,266.21,265.82,263.19,265.04,259.78,256.64,255.09,251.26,247.47,241.85,240.76,241.75,245.45,238.04,242.67,251.79,249.39,252.84,252.36,250.08,247.58,251.65,246.69,255.4,259.85,261.48,259.78,261.73,262.84,261.01,260.44,255.89,260.71,263.67,260.87,260,257.09,257.68,265.09,242.9,249.88,253.18,248.23,249.38,256.32,258.53,256.89,262.48,250.49,251,250.49,254.3,256.71,264.12,266.93,270.06,271,274.58,272.16,277.69,272.25,270.6,261.1,255.64,255.96,248.23,244.84,251.47,253.24,258.29,258.21,265.18,264.54,259.69,259.39,250.6,250.08,239.35,247.28,232.82,241.88,249.5,256.98,254.7,255.16,263.22,259.24,251.84,250.25,243.71,253.83,253.03,262.89,263.84,269.31,263.02,263.25,267.27,271.88,267.99,258.24,258.8,248.54,247.03,248.57,245.78,245.28,241.86,242.2,241.43,240.44,239.55,238.2,234.98,237.41,235.49)
	self.src = blocks.vector_source_f(src_data)
	self.expo = exp_average.expavg_ff(0.1818)
	self.dst1 = blocks.vector_sink_f()
	self.dst2 = blocks.vector_sink_f()
	self.connect(self.src,self.expo)
	self.connect(self.expo,self.dst1)
	self.connect(self.src,self.dst2)

if __name__ == '__main__':
	
    	tb1 = example_expavg()
	try:
		tb1.run()
		result_data = tb1.dst1.data()
		testfigure = plt.figure(1)
		plt.plot(result_data, label = "10 days EMA data(filtered data)")
		plt.plot(tb1.dst2.data(), label = "Original data")
		plt.ylabel('Stock price in USD')
		plt.legend(bbox_to_anchor=(0.,1.02,1.,.102), loc=3,ncol=2,mode="expand", borderaxespad = 0.)
		plt.show()
		
	except KeyboardInterrupt:
		pass

